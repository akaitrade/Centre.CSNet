/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NodeApi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Pool : TBase
  {
    private byte[] _hash;
    private byte[] _prevHash;
    private long _time;
    private int _transactionsCount;
    private long _poolNumber;
    private byte[] _writer;
    private NodeApi.Amount _totalFee;
    private List<byte[]> _confidants;
    private long _realTrusted;
    private sbyte _numberTrusted;

    public byte[] Hash
    {
      get
      {
        return _hash;
      }
      set
      {
        __isset.hash = true;
        this._hash = value;
      }
    }

    public byte[] PrevHash
    {
      get
      {
        return _prevHash;
      }
      set
      {
        __isset.prevHash = true;
        this._prevHash = value;
      }
    }

    public long Time
    {
      get
      {
        return _time;
      }
      set
      {
        __isset.time = true;
        this._time = value;
      }
    }

    public int TransactionsCount
    {
      get
      {
        return _transactionsCount;
      }
      set
      {
        __isset.transactionsCount = true;
        this._transactionsCount = value;
      }
    }

    public long PoolNumber
    {
      get
      {
        return _poolNumber;
      }
      set
      {
        __isset.poolNumber = true;
        this._poolNumber = value;
      }
    }

    public byte[] Writer
    {
      get
      {
        return _writer;
      }
      set
      {
        __isset.writer = true;
        this._writer = value;
      }
    }

    public NodeApi.Amount TotalFee
    {
      get
      {
        return _totalFee;
      }
      set
      {
        __isset.totalFee = true;
        this._totalFee = value;
      }
    }

    public List<byte[]> Confidants
    {
      get
      {
        return _confidants;
      }
      set
      {
        __isset.confidants = true;
        this._confidants = value;
      }
    }

    public long RealTrusted
    {
      get
      {
        return _realTrusted;
      }
      set
      {
        __isset.realTrusted = true;
        this._realTrusted = value;
      }
    }

    public sbyte NumberTrusted
    {
      get
      {
        return _numberTrusted;
      }
      set
      {
        __isset.numberTrusted = true;
        this._numberTrusted = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool hash;
      public bool prevHash;
      public bool time;
      public bool transactionsCount;
      public bool poolNumber;
      public bool writer;
      public bool totalFee;
      public bool confidants;
      public bool realTrusted;
      public bool numberTrusted;
    }

    public Pool() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Hash = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                PrevHash = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Time = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                TransactionsCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                PoolNumber = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Writer = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                TotalFee = new NodeApi.Amount();
                TotalFee.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.List) {
                {
                  Confidants = new List<byte[]>();
                  TList _list24 = iprot.ReadListBegin();
                  for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                  {
                    byte[] _elem26;
                    _elem26 = iprot.ReadBinary();
                    Confidants.Add(_elem26);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I64) {
                RealTrusted = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Byte) {
                NumberTrusted = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Pool");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Hash != null && __isset.hash) {
          field.Name = "hash";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Hash);
          oprot.WriteFieldEnd();
        }
        if (PrevHash != null && __isset.prevHash) {
          field.Name = "prevHash";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(PrevHash);
          oprot.WriteFieldEnd();
        }
        if (__isset.time) {
          field.Name = "time";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Time);
          oprot.WriteFieldEnd();
        }
        if (__isset.transactionsCount) {
          field.Name = "transactionsCount";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(TransactionsCount);
          oprot.WriteFieldEnd();
        }
        if (__isset.poolNumber) {
          field.Name = "poolNumber";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(PoolNumber);
          oprot.WriteFieldEnd();
        }
        if (Writer != null && __isset.writer) {
          field.Name = "writer";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Writer);
          oprot.WriteFieldEnd();
        }
        if (TotalFee != null && __isset.totalFee) {
          field.Name = "totalFee";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          TotalFee.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Confidants != null && __isset.confidants) {
          field.Name = "confidants";
          field.Type = TType.List;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Confidants.Count));
            foreach (byte[] _iter27 in Confidants)
            {
              oprot.WriteBinary(_iter27);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.realTrusted) {
          field.Name = "realTrusted";
          field.Type = TType.I64;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(RealTrusted);
          oprot.WriteFieldEnd();
        }
        if (__isset.numberTrusted) {
          field.Name = "numberTrusted";
          field.Type = TType.Byte;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(NumberTrusted);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Pool(");
      bool __first = true;
      if (Hash != null && __isset.hash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Hash: ");
        __sb.Append(Hash);
      }
      if (PrevHash != null && __isset.prevHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PrevHash: ");
        __sb.Append(PrevHash);
      }
      if (__isset.time) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Time: ");
        __sb.Append(Time);
      }
      if (__isset.transactionsCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TransactionsCount: ");
        __sb.Append(TransactionsCount);
      }
      if (__isset.poolNumber) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PoolNumber: ");
        __sb.Append(PoolNumber);
      }
      if (Writer != null && __isset.writer) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Writer: ");
        __sb.Append(Writer);
      }
      if (TotalFee != null && __isset.totalFee) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TotalFee: ");
        __sb.Append(TotalFee== null ? "<null>" : TotalFee.ToString());
      }
      if (Confidants != null && __isset.confidants) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Confidants: ");
        __sb.Append(Confidants);
      }
      if (__isset.realTrusted) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RealTrusted: ");
        __sb.Append(RealTrusted);
      }
      if (__isset.numberTrusted) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NumberTrusted: ");
        __sb.Append(NumberTrusted);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
