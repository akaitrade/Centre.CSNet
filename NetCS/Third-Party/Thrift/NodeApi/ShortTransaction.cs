/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NodeApi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ShortTransaction : TBase
  {
    private TransactionId _id;
    private byte[] _source;
    private byte[] _target;
    private NodeApi.Amount _amount;
    private AmountCommission _fee;
    private long _timeCreation;
    private sbyte _currency;
    private TransactionType _type;
    private byte[] _userFields;

    public TransactionId Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public byte[] Source
    {
      get
      {
        return _source;
      }
      set
      {
        __isset.source = true;
        this._source = value;
      }
    }

    public byte[] Target
    {
      get
      {
        return _target;
      }
      set
      {
        __isset.target = true;
        this._target = value;
      }
    }

    public NodeApi.Amount Amount
    {
      get
      {
        return _amount;
      }
      set
      {
        __isset.amount = true;
        this._amount = value;
      }
    }

    public AmountCommission Fee
    {
      get
      {
        return _fee;
      }
      set
      {
        __isset.fee = true;
        this._fee = value;
      }
    }

    public long TimeCreation
    {
      get
      {
        return _timeCreation;
      }
      set
      {
        __isset.timeCreation = true;
        this._timeCreation = value;
      }
    }

    public sbyte Currency
    {
      get
      {
        return _currency;
      }
      set
      {
        __isset.currency = true;
        this._currency = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="TransactionType"/>
    /// </summary>
    public TransactionType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public byte[] UserFields
    {
      get
      {
        return _userFields;
      }
      set
      {
        __isset.userFields = true;
        this._userFields = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool source;
      public bool target;
      public bool amount;
      public bool fee;
      public bool timeCreation;
      public bool currency;
      public bool type;
      public bool userFields;
    }

    public ShortTransaction() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Id = new TransactionId();
                Id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Source = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Target = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Amount = new NodeApi.Amount();
                Amount.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                Fee = new AmountCommission();
                Fee.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I64) {
                TimeCreation = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Byte) {
                Currency = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                Type = (TransactionType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                UserFields = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ShortTransaction");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Source != null && __isset.source) {
          field.Name = "source";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Source);
          oprot.WriteFieldEnd();
        }
        if (Target != null && __isset.target) {
          field.Name = "target";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Target);
          oprot.WriteFieldEnd();
        }
        if (Amount != null && __isset.amount) {
          field.Name = "amount";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Amount.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Fee != null && __isset.fee) {
          field.Name = "fee";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          Fee.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeCreation) {
          field.Name = "timeCreation";
          field.Type = TType.I64;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TimeCreation);
          oprot.WriteFieldEnd();
        }
        if (__isset.currency) {
          field.Name = "currency";
          field.Type = TType.Byte;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(Currency);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Type);
          oprot.WriteFieldEnd();
        }
        if (UserFields != null && __isset.userFields) {
          field.Name = "userFields";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(UserFields);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ShortTransaction(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id== null ? "<null>" : Id.ToString());
      }
      if (Source != null && __isset.source) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Source: ");
        __sb.Append(Source);
      }
      if (Target != null && __isset.target) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Target: ");
        __sb.Append(Target);
      }
      if (Amount != null && __isset.amount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Amount: ");
        __sb.Append(Amount== null ? "<null>" : Amount.ToString());
      }
      if (Fee != null && __isset.fee) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Fee: ");
        __sb.Append(Fee== null ? "<null>" : Fee.ToString());
      }
      if (__isset.timeCreation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeCreation: ");
        __sb.Append(TimeCreation);
      }
      if (__isset.currency) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Currency: ");
        __sb.Append(Currency);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (UserFields != null && __isset.userFields) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserFields: ");
        __sb.Append(UserFields);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
