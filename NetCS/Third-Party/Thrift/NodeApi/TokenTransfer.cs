/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NodeApi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TokenTransfer : TBase
  {
    private byte[] _token;
    private string _code;
    private byte[] _sender;
    private byte[] _receiver;
    private string _amount;
    private byte[] _initiator;
    private TransactionId _transaction;
    private long _time;
    private SmartOperationState _state;
    private byte[] _userFields;
    private AmountCommission _fee;
    private List<ExtraFee> _extraFee;

    public byte[] Token
    {
      get
      {
        return _token;
      }
      set
      {
        __isset.token = true;
        this._token = value;
      }
    }

    public string Code
    {
      get
      {
        return _code;
      }
      set
      {
        __isset.code = true;
        this._code = value;
      }
    }

    public byte[] Sender
    {
      get
      {
        return _sender;
      }
      set
      {
        __isset.sender = true;
        this._sender = value;
      }
    }

    public byte[] Receiver
    {
      get
      {
        return _receiver;
      }
      set
      {
        __isset.receiver = true;
        this._receiver = value;
      }
    }

    public string Amount
    {
      get
      {
        return _amount;
      }
      set
      {
        __isset.amount = true;
        this._amount = value;
      }
    }

    public byte[] Initiator
    {
      get
      {
        return _initiator;
      }
      set
      {
        __isset.initiator = true;
        this._initiator = value;
      }
    }

    public TransactionId Transaction
    {
      get
      {
        return _transaction;
      }
      set
      {
        __isset.transaction = true;
        this._transaction = value;
      }
    }

    public long Time
    {
      get
      {
        return _time;
      }
      set
      {
        __isset.time = true;
        this._time = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="SmartOperationState"/>
    /// </summary>
    public SmartOperationState State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.state = true;
        this._state = value;
      }
    }

    public byte[] UserFields
    {
      get
      {
        return _userFields;
      }
      set
      {
        __isset.userFields = true;
        this._userFields = value;
      }
    }

    public AmountCommission Fee
    {
      get
      {
        return _fee;
      }
      set
      {
        __isset.fee = true;
        this._fee = value;
      }
    }

    public List<ExtraFee> ExtraFee
    {
      get
      {
        return _extraFee;
      }
      set
      {
        __isset.extraFee = true;
        this._extraFee = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool token;
      public bool code;
      public bool sender;
      public bool receiver;
      public bool amount;
      public bool initiator;
      public bool transaction;
      public bool time;
      public bool state;
      public bool userFields;
      public bool fee;
      public bool extraFee;
    }

    public TokenTransfer() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Token = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Code = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Sender = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Receiver = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Amount = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Initiator = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                Transaction = new TransactionId();
                Transaction.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Time = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                State = (SmartOperationState)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                UserFields = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Struct) {
                Fee = new AmountCommission();
                Fee.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.List) {
                {
                  ExtraFee = new List<ExtraFee>();
                  TList _list131 = iprot.ReadListBegin();
                  for( int _i132 = 0; _i132 < _list131.Count; ++_i132)
                  {
                    ExtraFee _elem133;
                    _elem133 = new ExtraFee();
                    _elem133.Read(iprot);
                    ExtraFee.Add(_elem133);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TokenTransfer");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token != null && __isset.token) {
          field.Name = "token";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Token);
          oprot.WriteFieldEnd();
        }
        if (Code != null && __isset.code) {
          field.Name = "code";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Code);
          oprot.WriteFieldEnd();
        }
        if (Sender != null && __isset.sender) {
          field.Name = "sender";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Sender);
          oprot.WriteFieldEnd();
        }
        if (Receiver != null && __isset.receiver) {
          field.Name = "receiver";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Receiver);
          oprot.WriteFieldEnd();
        }
        if (Amount != null && __isset.amount) {
          field.Name = "amount";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Amount);
          oprot.WriteFieldEnd();
        }
        if (Initiator != null && __isset.initiator) {
          field.Name = "initiator";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Initiator);
          oprot.WriteFieldEnd();
        }
        if (Transaction != null && __isset.transaction) {
          field.Name = "transaction";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          Transaction.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.time) {
          field.Name = "time";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Time);
          oprot.WriteFieldEnd();
        }
        if (__isset.state) {
          field.Name = "state";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)State);
          oprot.WriteFieldEnd();
        }
        if (UserFields != null && __isset.userFields) {
          field.Name = "userFields";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(UserFields);
          oprot.WriteFieldEnd();
        }
        if (Fee != null && __isset.fee) {
          field.Name = "fee";
          field.Type = TType.Struct;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          Fee.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ExtraFee != null && __isset.extraFee) {
          field.Name = "extraFee";
          field.Type = TType.List;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ExtraFee.Count));
            foreach (ExtraFee _iter134 in ExtraFee)
            {
              _iter134.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TokenTransfer(");
      bool __first = true;
      if (Token != null && __isset.token) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token);
      }
      if (Code != null && __isset.code) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Code: ");
        __sb.Append(Code);
      }
      if (Sender != null && __isset.sender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sender: ");
        __sb.Append(Sender);
      }
      if (Receiver != null && __isset.receiver) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Receiver: ");
        __sb.Append(Receiver);
      }
      if (Amount != null && __isset.amount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Amount: ");
        __sb.Append(Amount);
      }
      if (Initiator != null && __isset.initiator) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Initiator: ");
        __sb.Append(Initiator);
      }
      if (Transaction != null && __isset.transaction) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Transaction: ");
        __sb.Append(Transaction== null ? "<null>" : Transaction.ToString());
      }
      if (__isset.time) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Time: ");
        __sb.Append(Time);
      }
      if (__isset.state) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("State: ");
        __sb.Append(State);
      }
      if (UserFields != null && __isset.userFields) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserFields: ");
        __sb.Append(UserFields);
      }
      if (Fee != null && __isset.fee) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Fee: ");
        __sb.Append(Fee== null ? "<null>" : Fee.ToString());
      }
      if (ExtraFee != null && __isset.extraFee) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ExtraFee: ");
        __sb.Append(ExtraFee);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
