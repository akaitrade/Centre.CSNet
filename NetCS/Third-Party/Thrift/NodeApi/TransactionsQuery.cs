/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NodeApi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TransactionsQuery : TBase
  {
    private short _flag;
    private List<SingleQuery> _queries;

    public short Flag
    {
      get
      {
        return _flag;
      }
      set
      {
        __isset.flag = true;
        this._flag = value;
      }
    }

    public List<SingleQuery> Queries
    {
      get
      {
        return _queries;
      }
      set
      {
        __isset.queries = true;
        this._queries = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool flag;
      public bool queries;
    }

    public TransactionsQuery() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Flag = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Queries = new List<SingleQuery>();
                  TList _list53 = iprot.ReadListBegin();
                  for( int _i54 = 0; _i54 < _list53.Count; ++_i54)
                  {
                    SingleQuery _elem55;
                    _elem55 = new SingleQuery();
                    _elem55.Read(iprot);
                    Queries.Add(_elem55);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TransactionsQuery");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.flag) {
          field.Name = "flag";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Flag);
          oprot.WriteFieldEnd();
        }
        if (Queries != null && __isset.queries) {
          field.Name = "queries";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Queries.Count));
            foreach (SingleQuery _iter56 in Queries)
            {
              _iter56.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TransactionsQuery(");
      bool __first = true;
      if (__isset.flag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Flag: ");
        __sb.Append(Flag);
      }
      if (Queries != null && __isset.queries) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Queries: ");
        __sb.Append(Queries);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
