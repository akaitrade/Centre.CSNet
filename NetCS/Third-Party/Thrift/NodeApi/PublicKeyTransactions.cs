/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NodeApi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PublicKeyTransactions : TBase
  {
    private byte[] _requestedAddress;
    private List<ShortTransaction> _transactions;
    private List<SelectedTokenTransfers> _transfersList;

    public byte[] RequestedAddress
    {
      get
      {
        return _requestedAddress;
      }
      set
      {
        __isset.requestedAddress = true;
        this._requestedAddress = value;
      }
    }

    public List<ShortTransaction> Transactions
    {
      get
      {
        return _transactions;
      }
      set
      {
        __isset.transactions = true;
        this._transactions = value;
      }
    }

    public List<SelectedTokenTransfers> TransfersList
    {
      get
      {
        return _transfersList;
      }
      set
      {
        __isset.transfersList = true;
        this._transfersList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool requestedAddress;
      public bool transactions;
      public bool transfersList;
    }

    public PublicKeyTransactions() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                RequestedAddress = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Transactions = new List<ShortTransaction>();
                  TList _list61 = iprot.ReadListBegin();
                  for( int _i62 = 0; _i62 < _list61.Count; ++_i62)
                  {
                    ShortTransaction _elem63;
                    _elem63 = new ShortTransaction();
                    _elem63.Read(iprot);
                    Transactions.Add(_elem63);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  TransfersList = new List<SelectedTokenTransfers>();
                  TList _list64 = iprot.ReadListBegin();
                  for( int _i65 = 0; _i65 < _list64.Count; ++_i65)
                  {
                    SelectedTokenTransfers _elem66;
                    _elem66 = new SelectedTokenTransfers();
                    _elem66.Read(iprot);
                    TransfersList.Add(_elem66);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("PublicKeyTransactions");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RequestedAddress != null && __isset.requestedAddress) {
          field.Name = "requestedAddress";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(RequestedAddress);
          oprot.WriteFieldEnd();
        }
        if (Transactions != null && __isset.transactions) {
          field.Name = "transactions";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Transactions.Count));
            foreach (ShortTransaction _iter67 in Transactions)
            {
              _iter67.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (TransfersList != null && __isset.transfersList) {
          field.Name = "transfersList";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, TransfersList.Count));
            foreach (SelectedTokenTransfers _iter68 in TransfersList)
            {
              _iter68.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("PublicKeyTransactions(");
      bool __first = true;
      if (RequestedAddress != null && __isset.requestedAddress) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RequestedAddress: ");
        __sb.Append(RequestedAddress);
      }
      if (Transactions != null && __isset.transactions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Transactions: ");
        __sb.Append(Transactions);
      }
      if (TransfersList != null && __isset.transfersList) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TransfersList: ");
        __sb.Append(TransfersList);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
