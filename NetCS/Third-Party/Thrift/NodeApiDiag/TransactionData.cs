/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NodeApiDiag
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TransactionData : TBase
  {
    private long _id;
    private byte[] _source;
    private byte[] _target;
    private Money _sum;
    private AmountCommission _max_fee;
    private AmountCommission _actual_fee;
    private byte[] _signature;
    private long _timestamp;
    private TransactionType _type;
    private List<UserField> _userFields;
    private Contract _contract;

    public long Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public byte[] Source
    {
      get
      {
        return _source;
      }
      set
      {
        __isset.source = true;
        this._source = value;
      }
    }

    public byte[] Target
    {
      get
      {
        return _target;
      }
      set
      {
        __isset.target = true;
        this._target = value;
      }
    }

    public Money Sum
    {
      get
      {
        return _sum;
      }
      set
      {
        __isset.sum = true;
        this._sum = value;
      }
    }

    public AmountCommission Max_fee
    {
      get
      {
        return _max_fee;
      }
      set
      {
        __isset.max_fee = true;
        this._max_fee = value;
      }
    }

    public AmountCommission Actual_fee
    {
      get
      {
        return _actual_fee;
      }
      set
      {
        __isset.actual_fee = true;
        this._actual_fee = value;
      }
    }

    public byte[] Signature
    {
      get
      {
        return _signature;
      }
      set
      {
        __isset.signature = true;
        this._signature = value;
      }
    }

    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="TransactionType"/>
    /// </summary>
    public TransactionType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public List<UserField> UserFields
    {
      get
      {
        return _userFields;
      }
      set
      {
        __isset.userFields = true;
        this._userFields = value;
      }
    }

    public Contract Contract
    {
      get
      {
        return _contract;
      }
      set
      {
        __isset.contract = true;
        this._contract = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool source;
      public bool target;
      public bool sum;
      public bool max_fee;
      public bool actual_fee;
      public bool signature;
      public bool timestamp;
      public bool type;
      public bool userFields;
      public bool contract;
    }

    public TransactionData() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Id = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Source = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Target = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Sum = new Money();
                Sum.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                Max_fee = new AmountCommission();
                Max_fee.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                Actual_fee = new AmountCommission();
                Actual_fee.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Signature = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I64) {
                Timestamp = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                Type = (TransactionType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.List) {
                {
                  UserFields = new List<UserField>();
                  TList _list12 = iprot.ReadListBegin();
                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    UserField _elem14;
                    _elem14 = new UserField();
                    _elem14.Read(iprot);
                    UserFields.Add(_elem14);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Struct) {
                Contract = new Contract();
                Contract.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TransactionData");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Id);
          oprot.WriteFieldEnd();
        }
        if (Source != null && __isset.source) {
          field.Name = "source";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Source);
          oprot.WriteFieldEnd();
        }
        if (Target != null && __isset.target) {
          field.Name = "target";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Target);
          oprot.WriteFieldEnd();
        }
        if (Sum != null && __isset.sum) {
          field.Name = "sum";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Sum.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Max_fee != null && __isset.max_fee) {
          field.Name = "max_fee";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          Max_fee.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Actual_fee != null && __isset.actual_fee) {
          field.Name = "actual_fee";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          Actual_fee.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Signature != null && __isset.signature) {
          field.Name = "signature";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Signature);
          oprot.WriteFieldEnd();
        }
        if (__isset.timestamp) {
          field.Name = "timestamp";
          field.Type = TType.I64;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Timestamp);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Type);
          oprot.WriteFieldEnd();
        }
        if (UserFields != null && __isset.userFields) {
          field.Name = "userFields";
          field.Type = TType.List;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, UserFields.Count));
            foreach (UserField _iter15 in UserFields)
            {
              _iter15.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Contract != null && __isset.contract) {
          field.Name = "contract";
          field.Type = TType.Struct;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          Contract.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TransactionData(");
      bool __first = true;
      if (__isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Source != null && __isset.source) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Source: ");
        __sb.Append(Source);
      }
      if (Target != null && __isset.target) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Target: ");
        __sb.Append(Target);
      }
      if (Sum != null && __isset.sum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sum: ");
        __sb.Append(Sum== null ? "<null>" : Sum.ToString());
      }
      if (Max_fee != null && __isset.max_fee) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Max_fee: ");
        __sb.Append(Max_fee== null ? "<null>" : Max_fee.ToString());
      }
      if (Actual_fee != null && __isset.actual_fee) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Actual_fee: ");
        __sb.Append(Actual_fee== null ? "<null>" : Actual_fee.ToString());
      }
      if (Signature != null && __isset.signature) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Signature: ");
        __sb.Append(Signature);
      }
      if (__isset.timestamp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Timestamp: ");
        __sb.Append(Timestamp);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (UserFields != null && __isset.userFields) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserFields: ");
        __sb.Append(UserFields);
      }
      if (Contract != null && __isset.contract) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Contract: ");
        __sb.Append(Contract== null ? "<null>" : Contract.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
