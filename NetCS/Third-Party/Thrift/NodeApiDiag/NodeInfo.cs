/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NodeApiDiag
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NodeInfo : TBase
  {
    private string _id;
    private string _version;
    private Platform _platform;
    private SessionInfo _session;
    private StateInfo _state;
    private List<string> _grayListContent;
    private List<string> _blackListContent;
    private List<BootstrapNode> _bootstrap;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="Platform"/>
    /// </summary>
    public Platform Platform
    {
      get
      {
        return _platform;
      }
      set
      {
        __isset.platform = true;
        this._platform = value;
      }
    }

    public SessionInfo Session
    {
      get
      {
        return _session;
      }
      set
      {
        __isset.session = true;
        this._session = value;
      }
    }

    public StateInfo State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.state = true;
        this._state = value;
      }
    }

    public List<string> GrayListContent
    {
      get
      {
        return _grayListContent;
      }
      set
      {
        __isset.grayListContent = true;
        this._grayListContent = value;
      }
    }

    public List<string> BlackListContent
    {
      get
      {
        return _blackListContent;
      }
      set
      {
        __isset.blackListContent = true;
        this._blackListContent = value;
      }
    }

    public List<BootstrapNode> Bootstrap
    {
      get
      {
        return _bootstrap;
      }
      set
      {
        __isset.bootstrap = true;
        this._bootstrap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool version;
      public bool platform;
      public bool session;
      public bool state;
      public bool grayListContent;
      public bool blackListContent;
      public bool bootstrap;
    }

    public NodeInfo() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Version = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Platform = (Platform)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Session = new SessionInfo();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                State = new StateInfo();
                State.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  GrayListContent = new List<string>();
                  TList _list20 = iprot.ReadListBegin();
                  for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                  {
                    string _elem22;
                    _elem22 = iprot.ReadString();
                    GrayListContent.Add(_elem22);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.List) {
                {
                  BlackListContent = new List<string>();
                  TList _list23 = iprot.ReadListBegin();
                  for( int _i24 = 0; _i24 < _list23.Count; ++_i24)
                  {
                    string _elem25;
                    _elem25 = iprot.ReadString();
                    BlackListContent.Add(_elem25);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.List) {
                {
                  Bootstrap = new List<BootstrapNode>();
                  TList _list26 = iprot.ReadListBegin();
                  for( int _i27 = 0; _i27 < _list26.Count; ++_i27)
                  {
                    BootstrapNode _elem28;
                    _elem28 = new BootstrapNode();
                    _elem28.Read(iprot);
                    Bootstrap.Add(_elem28);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("NodeInfo");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (Version != null && __isset.version) {
          field.Name = "version";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Version);
          oprot.WriteFieldEnd();
        }
        if (__isset.platform) {
          field.Name = "platform";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Platform);
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (State != null && __isset.state) {
          field.Name = "state";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          State.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (GrayListContent != null && __isset.grayListContent) {
          field.Name = "grayListContent";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, GrayListContent.Count));
            foreach (string _iter29 in GrayListContent)
            {
              oprot.WriteString(_iter29);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (BlackListContent != null && __isset.blackListContent) {
          field.Name = "blackListContent";
          field.Type = TType.List;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, BlackListContent.Count));
            foreach (string _iter30 in BlackListContent)
            {
              oprot.WriteString(_iter30);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Bootstrap != null && __isset.bootstrap) {
          field.Name = "bootstrap";
          field.Type = TType.List;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Bootstrap.Count));
            foreach (BootstrapNode _iter31 in Bootstrap)
            {
              _iter31.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NodeInfo(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Version != null && __isset.version) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Version: ");
        __sb.Append(Version);
      }
      if (__isset.platform) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Platform: ");
        __sb.Append(Platform);
      }
      if (Session != null && __isset.session) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Session: ");
        __sb.Append(Session== null ? "<null>" : Session.ToString());
      }
      if (State != null && __isset.state) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("State: ");
        __sb.Append(State== null ? "<null>" : State.ToString());
      }
      if (GrayListContent != null && __isset.grayListContent) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GrayListContent: ");
        __sb.Append(GrayListContent);
      }
      if (BlackListContent != null && __isset.blackListContent) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BlackListContent: ");
        __sb.Append(BlackListContent);
      }
      if (Bootstrap != null && __isset.bootstrap) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bootstrap: ");
        __sb.Append(Bootstrap);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
