/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NodeApiDiag
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class StateInfo : TBase
  {
    private long _transactionsCount;
    private long _totalWalletsCount;
    private long _aliveWalletsCount;
    private long _contractsCount;
    private long _contractsQueueSize;
    private long _grayListSize;
    private long _blackListSize;
    private long _blockCacheSize;
    private StageCacheSize _consensusMessage;
    private StageCacheSize _contractsMessage;
    private StageCacheSize _contractsStorage;

    public long TransactionsCount
    {
      get
      {
        return _transactionsCount;
      }
      set
      {
        __isset.transactionsCount = true;
        this._transactionsCount = value;
      }
    }

    public long TotalWalletsCount
    {
      get
      {
        return _totalWalletsCount;
      }
      set
      {
        __isset.totalWalletsCount = true;
        this._totalWalletsCount = value;
      }
    }

    public long AliveWalletsCount
    {
      get
      {
        return _aliveWalletsCount;
      }
      set
      {
        __isset.aliveWalletsCount = true;
        this._aliveWalletsCount = value;
      }
    }

    public long ContractsCount
    {
      get
      {
        return _contractsCount;
      }
      set
      {
        __isset.contractsCount = true;
        this._contractsCount = value;
      }
    }

    public long ContractsQueueSize
    {
      get
      {
        return _contractsQueueSize;
      }
      set
      {
        __isset.contractsQueueSize = true;
        this._contractsQueueSize = value;
      }
    }

    public long GrayListSize
    {
      get
      {
        return _grayListSize;
      }
      set
      {
        __isset.grayListSize = true;
        this._grayListSize = value;
      }
    }

    public long BlackListSize
    {
      get
      {
        return _blackListSize;
      }
      set
      {
        __isset.blackListSize = true;
        this._blackListSize = value;
      }
    }

    public long BlockCacheSize
    {
      get
      {
        return _blockCacheSize;
      }
      set
      {
        __isset.blockCacheSize = true;
        this._blockCacheSize = value;
      }
    }

    public StageCacheSize ConsensusMessage
    {
      get
      {
        return _consensusMessage;
      }
      set
      {
        __isset.consensusMessage = true;
        this._consensusMessage = value;
      }
    }

    public StageCacheSize ContractsMessage
    {
      get
      {
        return _contractsMessage;
      }
      set
      {
        __isset.contractsMessage = true;
        this._contractsMessage = value;
      }
    }

    public StageCacheSize ContractsStorage
    {
      get
      {
        return _contractsStorage;
      }
      set
      {
        __isset.contractsStorage = true;
        this._contractsStorage = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool transactionsCount;
      public bool totalWalletsCount;
      public bool aliveWalletsCount;
      public bool contractsCount;
      public bool contractsQueueSize;
      public bool grayListSize;
      public bool blackListSize;
      public bool blockCacheSize;
      public bool consensusMessage;
      public bool contractsMessage;
      public bool contractsStorage;
    }

    public StateInfo() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                TransactionsCount = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                TotalWalletsCount = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                AliveWalletsCount = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                ContractsCount = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                ContractsQueueSize = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I64) {
                GrayListSize = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                BlackListSize = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                BlockCacheSize = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Struct) {
                ConsensusMessage = new StageCacheSize();
                ConsensusMessage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Struct) {
                ContractsMessage = new StageCacheSize();
                ContractsMessage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Struct) {
                ContractsStorage = new StageCacheSize();
                ContractsStorage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("StateInfo");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.transactionsCount) {
          field.Name = "transactionsCount";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TransactionsCount);
          oprot.WriteFieldEnd();
        }
        if (__isset.totalWalletsCount) {
          field.Name = "totalWalletsCount";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TotalWalletsCount);
          oprot.WriteFieldEnd();
        }
        if (__isset.aliveWalletsCount) {
          field.Name = "aliveWalletsCount";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(AliveWalletsCount);
          oprot.WriteFieldEnd();
        }
        if (__isset.contractsCount) {
          field.Name = "contractsCount";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ContractsCount);
          oprot.WriteFieldEnd();
        }
        if (__isset.contractsQueueSize) {
          field.Name = "contractsQueueSize";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ContractsQueueSize);
          oprot.WriteFieldEnd();
        }
        if (__isset.grayListSize) {
          field.Name = "grayListSize";
          field.Type = TType.I64;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(GrayListSize);
          oprot.WriteFieldEnd();
        }
        if (__isset.blackListSize) {
          field.Name = "blackListSize";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(BlackListSize);
          oprot.WriteFieldEnd();
        }
        if (__isset.blockCacheSize) {
          field.Name = "blockCacheSize";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(BlockCacheSize);
          oprot.WriteFieldEnd();
        }
        if (ConsensusMessage != null && __isset.consensusMessage) {
          field.Name = "consensusMessage";
          field.Type = TType.Struct;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          ConsensusMessage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ContractsMessage != null && __isset.contractsMessage) {
          field.Name = "contractsMessage";
          field.Type = TType.Struct;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          ContractsMessage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ContractsStorage != null && __isset.contractsStorage) {
          field.Name = "contractsStorage";
          field.Type = TType.Struct;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          ContractsStorage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("StateInfo(");
      bool __first = true;
      if (__isset.transactionsCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TransactionsCount: ");
        __sb.Append(TransactionsCount);
      }
      if (__isset.totalWalletsCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TotalWalletsCount: ");
        __sb.Append(TotalWalletsCount);
      }
      if (__isset.aliveWalletsCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AliveWalletsCount: ");
        __sb.Append(AliveWalletsCount);
      }
      if (__isset.contractsCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContractsCount: ");
        __sb.Append(ContractsCount);
      }
      if (__isset.contractsQueueSize) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContractsQueueSize: ");
        __sb.Append(ContractsQueueSize);
      }
      if (__isset.grayListSize) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GrayListSize: ");
        __sb.Append(GrayListSize);
      }
      if (__isset.blackListSize) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BlackListSize: ");
        __sb.Append(BlackListSize);
      }
      if (__isset.blockCacheSize) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BlockCacheSize: ");
        __sb.Append(BlockCacheSize);
      }
      if (ConsensusMessage != null && __isset.consensusMessage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ConsensusMessage: ");
        __sb.Append(ConsensusMessage== null ? "<null>" : ConsensusMessage.ToString());
      }
      if (ContractsMessage != null && __isset.contractsMessage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContractsMessage: ");
        __sb.Append(ContractsMessage== null ? "<null>" : ContractsMessage.ToString());
      }
      if (ContractsStorage != null && __isset.contractsStorage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContractsStorage: ");
        __sb.Append(ContractsStorage== null ? "<null>" : ContractsStorage.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
