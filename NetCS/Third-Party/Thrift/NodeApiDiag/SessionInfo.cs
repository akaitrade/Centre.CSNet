/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NodeApiDiag
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SessionInfo : TBase
  {
    private long _startRound;
    private long _curRound;
    private long _lastBlock;
    private long _uptimeMs;
    private long _aveRoundMs;

    public long StartRound
    {
      get
      {
        return _startRound;
      }
      set
      {
        __isset.startRound = true;
        this._startRound = value;
      }
    }

    public long CurRound
    {
      get
      {
        return _curRound;
      }
      set
      {
        __isset.curRound = true;
        this._curRound = value;
      }
    }

    public long LastBlock
    {
      get
      {
        return _lastBlock;
      }
      set
      {
        __isset.lastBlock = true;
        this._lastBlock = value;
      }
    }

    public long UptimeMs
    {
      get
      {
        return _uptimeMs;
      }
      set
      {
        __isset.uptimeMs = true;
        this._uptimeMs = value;
      }
    }

    public long AveRoundMs
    {
      get
      {
        return _aveRoundMs;
      }
      set
      {
        __isset.aveRoundMs = true;
        this._aveRoundMs = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool startRound;
      public bool curRound;
      public bool lastBlock;
      public bool uptimeMs;
      public bool aveRoundMs;
    }

    public SessionInfo() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                StartRound = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                CurRound = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                LastBlock = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                UptimeMs = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                AveRoundMs = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SessionInfo");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.startRound) {
          field.Name = "startRound";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(StartRound);
          oprot.WriteFieldEnd();
        }
        if (__isset.curRound) {
          field.Name = "curRound";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(CurRound);
          oprot.WriteFieldEnd();
        }
        if (__isset.lastBlock) {
          field.Name = "lastBlock";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LastBlock);
          oprot.WriteFieldEnd();
        }
        if (__isset.uptimeMs) {
          field.Name = "uptimeMs";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(UptimeMs);
          oprot.WriteFieldEnd();
        }
        if (__isset.aveRoundMs) {
          field.Name = "aveRoundMs";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(AveRoundMs);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SessionInfo(");
      bool __first = true;
      if (__isset.startRound) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StartRound: ");
        __sb.Append(StartRound);
      }
      if (__isset.curRound) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CurRound: ");
        __sb.Append(CurRound);
      }
      if (__isset.lastBlock) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastBlock: ");
        __sb.Append(LastBlock);
      }
      if (__isset.uptimeMs) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UptimeMs: ");
        __sb.Append(UptimeMs);
      }
      if (__isset.aveRoundMs) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AveRoundMs: ");
        __sb.Append(AveRoundMs);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
